token<-CAACEdEose0cBAAWHrv3IF62X6IZCH6Q2PWdDOyutiY0l70kPoOhHW8kuUrQcUEVlBcvatMJF731HBbGohCOkX3BZBjt63FYrZBmVof6HPY3BqpyN5NJjGFOff85hzOjA2KFgXq9ed9pgRSfhEC06X6PHTbPZBs7MfdZBRGYtRCdy6tK9atGrFywNJTZCJJMY9cHYRb4yprVvbQXQutQVJITF2VIYevT9gZD
token<-"CAACEdEose0cBAAWHrv3IF62X6IZCH6Q2PWdDOyutiY0l70kPoOhHW8kuUrQcUEVlBcvatMJF731HBbGohCOkX3BZBjt63FYrZBmVof6HPY3BqpyN5NJjGFOff85hzOjA2KFgXq9ed9pgRSfhEC06X6PHTbPZBs7MfdZBRGYtRCdy6tK9atGrFywNJTZCJJMY9cHYRb4yprVvbQXQutQVJITF2VIYevT9gZD"
my_friends <- getFriends(token, simplify = TRUE)
?getFriends
posts <- searchFacebook(string = "upworthy", token, n = 500,
since = "25 november 2013 00:00", until = "25 november 2013 23:59")
?searchFacebook
posts <- searchFacebook( string="facebook", token=fb_oauth, n=100 )
page <- getPage("humansofnewyork", token, n = 5000)
page[which.max(page$likes_count), ]
token<-"CAACEdEose0cBAEdaMs8gWB6stDPM6w3lPHZBrKueDU3Scn64Dmc6SOTeGF8kxOnU3QOSwMnH9MtbZChVECjDtxv7a331xHxMoCDi9mccF8d5C5Bnz1WUOp9ti0ZBVXgyksnP6kGccIYlRDQ6QoNhfHZAwUYN00g6pY7v6juvpfxZAiY2FfQZCn01mRg6m1PJlXTZAREdPzzqhT87SZCTIyn2vXsKbJN2zewZD"
page <- getPage("humansofnewyork", token, n = 50)
page[which.max(page$likes_count), ]
page <- getPage("hkusecret", token, n = 50)
page <- getPage("humansofhongkong", token, n = 50)
page[which.max(page$likes_count), ]
page <- getPage("humansofhongkong", token, n = 500)
page[which.max(page$likes_count), ]
page <- getPage("hkusecrets", token, n = 500)
page[which.max(page$likes_count), ]
page <- getPage("ktscsssecrets", token, n = 500)
page <- getPage("ktscsssecrets", token, n = 500)
page <- getPage("hkustsecrets", token, n = 500)
page[which.max(page$likes_count), ]
page <- getPage("ktscss-secrets", token, n = 500)
page <- getPage("ktscss", token, n = 500)
page
head(page)
page <- getPage("hkuers", token, n = 500)
page <- getPage("hkuers", token, n = 50)
token<-"CAACEdEose0cBAEdaMs8gWB6stDPM6w3lPHZBrKueDU3Scn64Dmc6SOTeGF8kxOnU3QOSwMnH9MtbZChVECjDtxv7a331xHxMoCDi9mccF8d5C5Bnz1WUOp9ti0ZBVXgyksnP6kGccIYlRDQ6QoNhfHZAwUYN00g6pY7v6juvpfxZAiY2FfQZCn01mRg6m1PJlXTZAREdPzzqhT87SZCTIyn2vXsKbJN2zewZD"
page <- getPage("hkuers", token, n = 50)
?Rfacebook
load("fb_oauth")
fb_page <- getPage(page="ktscss", token=fb_oauth)
head(fb_page)
page <- getPage(page="humansofnewyork", token=fb_oauth, feed=TRUE)
page <- getPage(page="humansofnewyork", token=fb_oauth, n=1000
since='2013/01/01', until='2013/01/31')
page <- getPage(page="humansofnewyork", token=fb_oauth, n=1000,since='2013/01/01', until='2013/01/31')
pages <- searchPages( string="facebook", token=fb_oauth, n=100 )
head(pages)
pages <- searchPages( string="data science", token=fb_oauth, n=100 )
head(pages)
pages <- searchPages( string="ktscss", token=fb_oauth, n=100 )
pages
head(pages)
tail(pages)
pvals<-seq(0,1,length=1000)
pvals<-seq(0,1,length=1000)
plot(pvals,dbinom(3,4,pvals)/dbinom(3,2,3/4))
plot(pvals,dbinom(3,4,pvals)/dbinom(3,2,3/4))
plot(pvals, dbinom(3, 4, pvals)/dbinom(3, 4, 3/4), type = "l", frame = FALSE,
lwd = 3, xlab = "p", ylab = "likelihood / max likelihood")
8
x=rnorm(10)
y=rnorm(10)
t.test(x,y)
mean(x)
mean(y)
qt(c(0.025,0.975),df=8)
1100+2.306*30/3
1100-2.306*30/3
2*3/2.306
R.version.string
install.packages('swirl')
library(swirl)
install_from_swirl("Statistical Inference")
swirl
swirl()
1-3/36
deck
4*13
4/52
0
3*4/52
11/51
2/12
6/13
2/13
info()
info()
2/51
0.8*1.6/2
0.64
mypdf
integrate(mypdf(0,1.6))
?integrate
integrate(function(x),0.1.6)
integrate(mypdf,lower=0,upper=1.6)
0.25
4
sqr(0.5*4)
(0.5*4)^(0.5)
data(mtcars)
data(mtcars)
names(mtcars)
lm(mpg~cyl+wt,data=mtcars)
-1.508*4
lm(mpg~cyl,data=mtcars)
lm(mpg~cyl+wt,data=mtcars)
a<-lm(mpg~cyl+wt,data=mtcars)
summary(a)
b<-lm(mpg~cyl,data=mtcars)
summary(b)
c<-lm(mpg~wt,data=mtcars)
summary(c)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x)
plot(y)
fit<-lm(y~x)
fit
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbetas(fit)
fit<-lm(y~x)
dfbetas(fit)
library(swirl)
swirl()
0
install_from_swirl("Regression Models")
swirl()
plot(child~parent,data=galton)
plot(jitter(child,4)~parent,galton)
regrline<-lm(child~parent,galton)
abline(regrline,lwd=3,col="red")
summary(regrline)
fit<-lm(child~parent,galton)
summary(fit)
0.0487
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
rhs-lhs
lhs-rhs
all.equal
all.equal(lhs,rhs)
varchild<-var(child,data=galton)
varchild<-var(galton$child)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(est)
varEst<-var(ols.slope)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,varRes,varEst)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist,attenu)
mean(efit)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
swirl()
swirl()
library(swirl)
swirl()
cor(gpa_nor,gch_nor)
l_nor<-lm(galton$child~galton$parent)
l_nor<-lm(gch_nor~gpa_nor)
fit<-lm(child~parent,galton)
sum(fit$residuals)/926
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit$sigma)
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-galton$child
mu<-mean(galton$child)
STot=sum((galton$child-mu)^2)
STot<-sum((galton$child-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes<-sum((fit$residuals)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r
summary(fit)$r
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton
)
lm(child~parent,galton)
lm(child ~ 1,galton)
head(trees)
fit<-lm(volume~Girth+Height+Constant-1,trees)
fit<-lm(Volume~Girth+Height+Constant-1,trees)
trees2<-eliminate("Girth",trees)
head(trees2)
fit2<- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility~.,swiss)
all<-lm(Fertility~.,swiss)
summary(all)
summary(lm(Fertility~Argiculture,swiss))
summary(lm(Fertility~argiculture,swiss))
summary(lm(Fertility~Agiculture,swiss))
summary(lm(Fertility~Agriculture,swiss))
cor(swiss$Education,swiss$Examination)
cor(swiss$Agriculture,swiss$Examination)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec<-sum(swiss$Examination,swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit<-lm(Fertility~.+ec,swiss)
coef(all)-coef(efit)
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays,15)
A
sA
M[,2]
sA[,2]
InsectSprays[,2]
summary(InsectSprays[,2])
sapply(class(InsectSprays))
sapply(class,InsectSprays)
sapply(InsectSprays,class)
fit<-lm(count~spray)
fit<-lm(count~spray,InsectSprays)
summary(fit)
summary(fit)$coef
summary(fit)$coef[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sprayB)
mean(sB)
nfit<-lm(count~spray-1)
nfit<-lm(count~spray-1,InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,C)
spray2<-relevel(InsectSprays$spray,sC)
spray2<-relevel(InsectSprays,sC)
spray2<-relevel(InsectSprays)
spray2<-relevel(InsectSprays,C)
?relevel
spray2<-relevel(InsectSprays$spray,ref='C')
fit2<-lm(count~spray,InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
coefficient (fit$coef[3])
fit$coef[3]
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year,hunger)
summary(fit)$coef
x[hunger$Sex=="Female"]
lmF <-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <-lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth<-lm(Numeric,Year+Sex,hunger)
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
mean(fitno)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma<-fit
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd<-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit,
| which=2)
plot(fit, which=2)
sigma1
sigma1<-
fit
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fit, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
q()
a
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility)
mdl<-lm(Fertility~Agriculture,swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2<-lm(Fertility~.-Examination)
mdl2<-lm(Fertility~.-Examination,swiss)
vif(mdl2)
q()
data(mtcars)
data(mtcars)
fit <- lm(mpg ~ cyl + hp + wt + am, data = mtcars)
summary(fit)
æ‰‹(
q()
a
x<-c(140,138,150,148,135)
y<-c(132,135,151,146,130)
mean(x)
mean(y)
prop.test(42,100,p=.05)
prop.test(142.2,5,p=.05)
sd(y)
t=(mean(y)-mean(x))/(sd(y)/sqrt(5))
t
pt(t,df=4)
pt(t,df=4)/2
?t.test()
t.test(x,y,alternative=two.sided,conf.level=0.95)
t.test(x,y,two.sided,conf.level=0.95)
t.test(x,y,alternative='two.sided',conf.level=0.95)
library(swirl)
swirl()
.997*.001
(1-.985)8(1-.001)
(1-.985)*(1-.001)
(.997*.001)/((.997*.001+.014985))
sum(1:6)/6
expect_dice
dice_high
sum(expect_dice*dice_high)
sum(dice_high)
expect_dice(dice_high)
expect_dice(dice_low)
.5 *( E(X_hi)+E(X_lo) )
.5 *( expect_dice(X_hi)+expect_dice(X_lo) )
.5 *( expect_dice(dice_high)+expect_dice(dice_low) )
integrate(myfunc())
myfunc
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,mean)
apply(allsam,1,mean)
mean(smeans)
dice_sqe
dice_sqr
ex2_fair<-sum(dice_sqr*PDF)
ex2_fair<-sum(dice_sqr*dice_fair)
ex2_fair-3.5^2
sum(edh^2)-dice_high
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(n)
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
q()
a
library(swirl)
swirl()
x1c<-simbias(x1)
x1c<-simbias(150)
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(Fertility~.,swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3<-lm(Fertility~Agriculture,swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anva(fit1,fit3)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
anova()
anova(n/d)
anova(fit3)
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl<-glm(ravenWinNum~ravenScore,family=binomial,ravenData)
lodds<- predict(mdl, data.frame(ravenScore=c(0,3,6)
)
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
view(hits)
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<- mdl$fitted.values[704]
qpois(.95,lambda)
mdl2<-pois(offset)
mdl2<-glm(offset)
mdl2<-glm(offset,1)
mdl2<-glm(1)
mdl2<-glm(offset)
mdl2<-glm(log(visits+1))
mdl2<-glm(visits+1,family=poisson(link=log))
?
)
0
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
q()
library(swirl)
swirl()
choose(5,2)
for (i in 3:5) choose(5,x)*(.8)^x*(.2)^(5-x)
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
lower.tail(2)
pbinom(2,5,lower.tail=FALSE)
pbinom(2,5)
pbinom(2)
pbinom(5)
info()
skip()
0
qnorm(.1)
0
qnorm(3,2)
qnorm(.975,mean=3,sd=2)
0
1.96*2+3
0
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
0
pnorm((1200-1020)/50,lower.tail=FALSE
)
0
qnorm(.75,mean=1020,sd=50)
0
pnorm(qnorm(.53))
qnorm(pnorm(.53))
0
ppois(3,2.5 * 4)
0
pbinom(5,1000,.01)
0
ppois(5,1000*.01)
q()
library(caret)
library(kernlab)
install.packages('kernlab')
library(kernlab)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
dim(training)
set.seed(1)
modelFit<-train(type~.,data=training,method='glm')
install.packages('e1071')
modelFit<-train(type~.,data=training,method='glm')
modelFii
modelFit
modelFit$finalModel
modelFit$finalModel
predictions<-predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
modelFit<-train(type~.,data=training,method='gbm')
predictions<-predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData=data.frame(diagnosis,predictors)
dim(AlzheimerDisease)
names(AlzheimerDisease)
AlzheimerDisease
diagnosis
names(diagnosis)
dim(diagnosis)
names(predictors)
setwd("C:/Users/user/Desktop/pml")
library(rpart)
training<-read.csv('pml-training.csv')
testing<-read.csv('pml-testing.csv')
library(caret)
library(rpart)
inTrain<-createDataPartition(y=training$class,p=0.75,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
modFit<-train(classe~.,method='rpart',data=train)
